(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('estraverse')) :
  typeof define === 'function' && define.amd ? define(['estraverse'], factory) :
  (global = global || self, global.esquery = factory(global.estraverse));
}(this, (function (estraverse) { 'use strict';

  estraverse = estraverse && Object.prototype.hasOwnProperty.call(estraverse, 'default') ? estraverse['default'] : estraverse;

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;

    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = o[Symbol.iterator]();
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var parser = createCommonjsModule(function (module) {
    /*
     * Generated by PEG.js 0.10.0.
     *
     * http://pegjs.org/
     */
    (function (root, factory) {
      if ( module.exports) {
        module.exports = factory();
      }
    })(commonjsGlobal, function () {

      function peg$subclass(child, parent) {
        function ctor() {
          this.constructor = child;
        }

        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
      }

      function peg$SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";

        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, peg$SyntaxError);
        }
      }

      peg$subclass(peg$SyntaxError, Error);

      peg$SyntaxError.buildMessage = function (expected, found) {
        var DESCRIBE_EXPECTATION_FNS = {
          literal: function literal(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },
          "class": function _class(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },
          any: function any(expectation) {
            return "any character";
          },
          end: function end(expectation) {
            return "end of input";
          },
          other: function other(expectation) {
            return expectation.description;
          }
        };

        function hex(ch) {
          return ch.charCodeAt(0).toString(16).toUpperCase();
        }

        function literalEscape(s) {
          return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
            return '\\x0' + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
            return '\\x' + hex(ch);
          });
        }

        function classEscape(s) {
          return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
            return '\\x0' + hex(ch);
          }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
            return '\\x' + hex(ch);
          });
        }

        function describeExpectation(expectation) {
          return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
        }

        function describeExpected(expected) {
          var descriptions = new Array(expected.length),
              i,
              j;

          for (i = 0; i < expected.length; i++) {
            descriptions[i] = describeExpectation(expected[i]);
          }

          descriptions.sort();

          if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
              if (descriptions[i - 1] !== descriptions[i]) {
                descriptions[j] = descriptions[i];
                j++;
              }
            }

            descriptions.length = j;
          }

          switch (descriptions.length) {
            case 1:
              return descriptions[0];

            case 2:
              return descriptions[0] + " or " + descriptions[1];

            default:
              return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
          }
        }

        function describeFound(found) {
          return found ? "\"" + literalEscape(found) + "\"" : "end of input";
        }

        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
      };

      function peg$parse(input, options) {
        options = options !== void 0 ? options : {};

        var peg$FAILED = {},
            peg$startRuleFunctions = {
          start: peg$parsestart
        },
            peg$startRuleFunction = peg$parsestart,
            peg$c0 = function peg$c0(ss) {
          return ss.length === 1 ? ss[0] : {
            type: 'matches',
            selectors: ss
          };
        },
            peg$c1 = function peg$c1() {
          return void 0;
        },
            peg$c2 = " ",
            peg$c3 = peg$literalExpectation(" ", false),
            peg$c4 = /^[^ [\],():#!=><~+.]/,
            peg$c5 = peg$classExpectation([" ", "[", "]", ",", "(", ")", ":", "#", "!", "=", ">", "<", "~", "+", "."], true, false),
            peg$c6 = function peg$c6(i) {
          return i.join('');
        },
            peg$c7 = ">",
            peg$c8 = peg$literalExpectation(">", false),
            peg$c9 = function peg$c9() {
          return 'child';
        },
            peg$c10 = "~",
            peg$c11 = peg$literalExpectation("~", false),
            peg$c12 = function peg$c12() {
          return 'sibling';
        },
            peg$c13 = "+",
            peg$c14 = peg$literalExpectation("+", false),
            peg$c15 = function peg$c15() {
          return 'adjacent';
        },
            peg$c16 = function peg$c16() {
          return 'descendant';
        },
            peg$c17 = ",",
            peg$c18 = peg$literalExpectation(",", false),
            peg$c19 = function peg$c19(s, ss) {
          return [s].concat(ss.map(function (s) {
            return s[3];
          }));
        },
            peg$c20 = function peg$c20(a, ops) {
          return ops.reduce(function (memo, rhs) {
            return {
              type: rhs[0],
              left: memo,
              right: rhs[1]
            };
          }, a);
        },
            peg$c21 = "!",
            peg$c22 = peg$literalExpectation("!", false),
            peg$c23 = function peg$c23(subject, as) {
          var b = as.length === 1 ? as[0] : {
            type: 'compound',
            selectors: as
          };
          if (subject) b.subject = true;
          return b;
        },
            peg$c24 = "*",
            peg$c25 = peg$literalExpectation("*", false),
            peg$c26 = function peg$c26(a) {
          return {
            type: 'wildcard',
            value: a
          };
        },
            peg$c27 = "#",
            peg$c28 = peg$literalExpectation("#", false),
            peg$c29 = function peg$c29(i) {
          return {
            type: 'identifier',
            value: i
          };
        },
            peg$c30 = "[",
            peg$c31 = peg$literalExpectation("[", false),
            peg$c32 = "]",
            peg$c33 = peg$literalExpectation("]", false),
            peg$c34 = function peg$c34(v) {
          return v;
        },
            peg$c35 = /^[><!]/,
            peg$c36 = peg$classExpectation([">", "<", "!"], false, false),
            peg$c37 = "=",
            peg$c38 = peg$literalExpectation("=", false),
            peg$c39 = function peg$c39(a) {
          return (a || '') + '=';
        },
            peg$c40 = /^[><]/,
            peg$c41 = peg$classExpectation([">", "<"], false, false),
            peg$c42 = ".",
            peg$c43 = peg$literalExpectation(".", false),
            peg$c44 = function peg$c44(a, as) {
          return [].concat.apply([a], as).join('');
        },
            peg$c45 = function peg$c45(name, op, value) {
          return {
            type: 'attribute',
            name: name,
            operator: op,
            value: value
          };
        },
            peg$c46 = function peg$c46(name) {
          return {
            type: 'attribute',
            name: name
          };
        },
            peg$c47 = "\"",
            peg$c48 = peg$literalExpectation("\"", false),
            peg$c49 = /^[^\\"]/,
            peg$c50 = peg$classExpectation(["\\", "\""], true, false),
            peg$c51 = "\\",
            peg$c52 = peg$literalExpectation("\\", false),
            peg$c53 = peg$anyExpectation(),
            peg$c54 = function peg$c54(a, b) {
          return a + b;
        },
            peg$c55 = function peg$c55(d) {
          return {
            type: 'literal',
            value: strUnescape(d.join(''))
          };
        },
            peg$c56 = "'",
            peg$c57 = peg$literalExpectation("'", false),
            peg$c58 = /^[^\\']/,
            peg$c59 = peg$classExpectation(["\\", "'"], true, false),
            peg$c60 = /^[0-9]/,
            peg$c61 = peg$classExpectation([["0", "9"]], false, false),
            peg$c62 = function peg$c62(a, b) {
          // Can use `a.flat().join('')` once supported
          var leadingDecimals = a ? [].concat.apply([], a).join('') : '';
          return {
            type: 'literal',
            value: parseFloat(leadingDecimals + b.join(''))
          };
        },
            peg$c63 = function peg$c63(i) {
          return {
            type: 'literal',
            value: i
          };
        },
            peg$c64 = "type(",
            peg$c65 = peg$literalExpectation("type(", false),
            peg$c66 = /^[^ )]/,
            peg$c67 = peg$classExpectation([" ", ")"], true, false),
            peg$c68 = ")",
            peg$c69 = peg$literalExpectation(")", false),
            peg$c70 = function peg$c70(t) {
          return {
            type: 'type',
            value: t.join('')
          };
        },
            peg$c71 = /^[imsu]/,
            peg$c72 = peg$classExpectation(["i", "m", "s", "u"], false, false),
            peg$c73 = "/",
            peg$c74 = peg$literalExpectation("/", false),
            peg$c75 = /^[^\/]/,
            peg$c76 = peg$classExpectation(["/"], true, false),
            peg$c77 = function peg$c77(d, flgs) {
          return {
            type: 'regexp',
            value: new RegExp(d.join(''), flgs ? flgs.join('') : '')
          };
        },
            peg$c78 = function peg$c78(i, is) {
          return {
            type: 'field',
            name: is.reduce(function (memo, p) {
              return memo + p[0] + p[1];
            }, i)
          };
        },
            peg$c79 = ":not(",
            peg$c80 = peg$literalExpectation(":not(", false),
            peg$c81 = function peg$c81(ss) {
          return {
            type: 'not',
            selectors: ss
          };
        },
            peg$c82 = ":matches(",
            peg$c83 = peg$literalExpectation(":matches(", false),
            peg$c84 = function peg$c84(ss) {
          return {
            type: 'matches',
            selectors: ss
          };
        },
            peg$c85 = ":has(",
            peg$c86 = peg$literalExpectation(":has(", false),
            peg$c87 = function peg$c87(ss) {
          return {
            type: 'has',
            selectors: ss
          };
        },
            peg$c88 = ":first-child",
            peg$c89 = peg$literalExpectation(":first-child", false),
            peg$c90 = function peg$c90() {
          return nth(1);
        },
            peg$c91 = ":last-child",
            peg$c92 = peg$literalExpectation(":last-child", false),
            peg$c93 = function peg$c93() {
          return nthLast(1);
        },
            peg$c94 = ":nth-child(",
            peg$c95 = peg$literalExpectation(":nth-child(", false),
            peg$c96 = function peg$c96(n) {
          return nth(parseInt(n.join(''), 10));
        },
            peg$c97 = ":nth-last-child(",
            peg$c98 = peg$literalExpectation(":nth-last-child(", false),
            peg$c99 = function peg$c99(n) {
          return nthLast(parseInt(n.join(''), 10));
        },
            peg$c100 = ":",
            peg$c101 = peg$literalExpectation(":", false),
            peg$c102 = "statement",
            peg$c103 = peg$literalExpectation("statement", true),
            peg$c104 = "expression",
            peg$c105 = peg$literalExpectation("expression", true),
            peg$c106 = "declaration",
            peg$c107 = peg$literalExpectation("declaration", true),
            peg$c108 = "function",
            peg$c109 = peg$literalExpectation("function", true),
            peg$c110 = "pattern",
            peg$c111 = peg$literalExpectation("pattern", true),
            peg$c112 = function peg$c112(c) {
          return {
            type: 'class',
            name: c
          };
        },
            peg$currPos = 0,
            peg$posDetailsCache = [{
          line: 1,
          column: 1
        }],
            peg$maxFailPos = 0,
            peg$maxFailExpected = [],
            peg$resultsCache = {},
            peg$result;

        if ("startRule" in options) {
          if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
          }

          peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }

        function peg$literalExpectation(text, ignoreCase) {
          return {
            type: "literal",
            text: text,
            ignoreCase: ignoreCase
          };
        }

        function peg$classExpectation(parts, inverted, ignoreCase) {
          return {
            type: "class",
            parts: parts,
            inverted: inverted,
            ignoreCase: ignoreCase
          };
        }

        function peg$anyExpectation() {
          return {
            type: "any"
          };
        }

        function peg$endExpectation() {
          return {
            type: "end"
          };
        }

        function peg$computePosDetails(pos) {
          var details = peg$posDetailsCache[pos],
              p;

          if (details) {
            return details;
          } else {
            p = pos - 1;

            while (!peg$posDetailsCache[p]) {
              p--;
            }

            details = peg$posDetailsCache[p];
            details = {
              line: details.line,
              column: details.column
            };

            while (p < pos) {
              if (input.charCodeAt(p) === 10) {
                details.line++;
                details.column = 1;
              } else {
                details.column++;
              }

              p++;
            }

            peg$posDetailsCache[pos] = details;
            return details;
          }
        }

        function peg$computeLocation(startPos, endPos) {
          var startPosDetails = peg$computePosDetails(startPos),
              endPosDetails = peg$computePosDetails(endPos);
          return {
            start: {
              offset: startPos,
              line: startPosDetails.line,
              column: startPosDetails.column
            },
            end: {
              offset: endPos,
              line: endPosDetails.line,
              column: endPosDetails.column
            }
          };
        }

        function peg$fail(expected) {
          if (peg$currPos < peg$maxFailPos) {
            return;
          }

          if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
          }

          peg$maxFailExpected.push(expected);
        }

        function peg$buildStructuredError(expected, found, location) {
          return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
        }

        function peg$parsestart() {
          var s0, s1, s2, s3;
          var key = peg$currPos * 30 + 0,
              cached = peg$resultsCache[key];

          if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
          }

          s0 = peg$currPos;
          s1 = peg$parse_();

          if (s1 !== peg$FAIL